package net.amsoft.zioutils.services.jdbc.unsafe

import java.sql.{ResultSet, Time, Timestamp}

import zio.{IO, ZIO}

import scala.util.{Failure, Success, Try}

private [jdbc] object ResultSetMapper {

  import ResultSetReader._

  def parse[R](mapper: ResultSet => Seq[R], resultSet: ResultSet): Either[Exception, Seq[R]] = {
    Try(mapper(resultSet)) match {
      case Success(value)                => Right(value)
      case Failure(exception: Exception) => Left(exception)
      case Failure(exception)            => throw exception
    }
  }

  def zParse[R](mapper: ResultSet => Seq[R], resultSet: ResultSet): IO[Exception, Seq[R]] =
    ZIO.fromEither(parse(mapper.apply,resultSet))

  def apply[T1, R](constructor: T1 => R)(implicit evT1: Reader[T1]): ResultSet => Seq[R] = buildSequenceMapper(Mapper(constructor))
  def apply[T1, T2, R](constructor: (T1, T2) => R)(implicit evT1: Reader[T1], evT2: Reader[T2]): ResultSet => Seq[R] = buildSequenceMapper(Mapper(constructor))
  def apply[T1, T2, T3, R](constructor: (T1, T2, T3) => R)(implicit evT1: Reader[T1], evT2: Reader[T2], evT3: Reader[T3]): ResultSet => Seq[R] = buildSequenceMapper(Mapper(constructor))
  def apply[T1, T2, T3, T4, R](constructor: (T1, T2, T3, T4) => R)(implicit evT1: Reader[T1], evT2: Reader[T2], evT3: Reader[T3], evT4: Reader[T4]): ResultSet => Seq[R] = buildSequenceMapper(Mapper(constructor))
  def apply[T1, T2, T3, T4, T5, R](constructor: (T1, T2, T3, T4, T5) => R)(implicit evT1: Reader[T1], evT2: Reader[T2], evT3: Reader[T3], evT4: Reader[T4], evT5: Reader[T5]): ResultSet => Seq[R] = buildSequenceMapper(Mapper(constructor))
  def apply[T1, T2, T3, T4, T5, T6, R](constructor: (T1, T2, T3, T4, T5, T6) => R)(implicit evT1: Reader[T1], evT2: Reader[T2], evT3: Reader[T3], evT4: Reader[T4], evT5: Reader[T5], evT6: Reader[T6]): ResultSet => Seq[R] = buildSequenceMapper(Mapper(constructor))
  def apply[T1, T2, T3, T4, T5, T6, T7, R](constructor: (T1, T2, T3, T4, T5, T6, T7) => R)(implicit evT1: Reader[T1], evT2: Reader[T2], evT3: Reader[T3], evT4: Reader[T4], evT5: Reader[T5], evT6: Reader[T6], evT7: Reader[T7]): ResultSet => Seq[R] = buildSequenceMapper(Mapper(constructor))
  def apply[T1, T2, T3, T4, T5, T6, T7, T8, R](constructor: (T1, T2, T3, T4, T5, T6, T7, T8) => R)(implicit evT1: Reader[T1], evT2: Reader[T2], evT3: Reader[T3], evT4: Reader[T4], evT5: Reader[T5], evT6: Reader[T6], evT7: Reader[T7], evT8: Reader[T8]): ResultSet => Seq[R] = buildSequenceMapper(Mapper(constructor))
  def apply[T1, T2, T3, T4, T5, T6, T7, T8, T9, R](constructor: (T1, T2, T3, T4, T5, T6, T7, T8, T9) => R)(implicit evT1: Reader[T1], evT2: Reader[T2], evT3: Reader[T3], evT4: Reader[T4], evT5: Reader[T5], evT6: Reader[T6], evT7: Reader[T7], evT8: Reader[T8], evT9: Reader[T9]): ResultSet => Seq[R] = buildSequenceMapper(Mapper(constructor))
  def apply[T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, R](constructor: (T1, T2, T3, T4, T5, T6, T7, T8, T9, T10) => R)(implicit evT1: Reader[T1], evT2: Reader[T2], evT3: Reader[T3], evT4: Reader[T4], evT5: Reader[T5], evT6: Reader[T6], evT7: Reader[T7], evT8: Reader[T8], evT9: Reader[T9], evT10: Reader[T10]): ResultSet => Seq[R] = buildSequenceMapper(Mapper(constructor))
  def apply[T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, R](constructor: (T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11) => R)(implicit evT1: Reader[T1], evT2: Reader[T2], evT3: Reader[T3], evT4: Reader[T4], evT5: Reader[T5], evT6: Reader[T6], evT7: Reader[T7], evT8: Reader[T8], evT9: Reader[T9], evT10: Reader[T10], evT11: Reader[T11]): ResultSet => Seq[R] = buildSequenceMapper(Mapper(constructor))
  def apply[T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, R](constructor: (T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12) => R)(implicit evT1: Reader[T1], evT2: Reader[T2], evT3: Reader[T3], evT4: Reader[T4], evT5: Reader[T5], evT6: Reader[T6], evT7: Reader[T7], evT8: Reader[T8], evT9: Reader[T9], evT10: Reader[T10], evT11: Reader[T11], evT12: Reader[T12]): ResultSet => Seq[R] = buildSequenceMapper(Mapper(constructor))
  def apply[T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, R](constructor: (T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13) => R)(implicit evT1: Reader[T1], evT2: Reader[T2], evT3: Reader[T3], evT4: Reader[T4], evT5: Reader[T5], evT6: Reader[T6], evT7: Reader[T7], evT8: Reader[T8], evT9: Reader[T9], evT10: Reader[T10], evT11: Reader[T11], evT12: Reader[T12], evT13: Reader[T13]): ResultSet => Seq[R] = buildSequenceMapper(Mapper(constructor))
  def apply[T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, R](constructor: (T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14) => R)(implicit evT1: Reader[T1], evT2: Reader[T2], evT3: Reader[T3], evT4: Reader[T4], evT5: Reader[T5], evT6: Reader[T6], evT7: Reader[T7], evT8: Reader[T8], evT9: Reader[T9], evT10: Reader[T10], evT11: Reader[T11], evT12: Reader[T12], evT13: Reader[T13], evT14: Reader[T14]): ResultSet => Seq[R] = buildSequenceMapper(Mapper(constructor))
  def apply[T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, R](constructor: (T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15) => R)(implicit evT1: Reader[T1], evT2: Reader[T2], evT3: Reader[T3], evT4: Reader[T4], evT5: Reader[T5], evT6: Reader[T6], evT7: Reader[T7], evT8: Reader[T8], evT9: Reader[T9], evT10: Reader[T10], evT11: Reader[T11], evT12: Reader[T12], evT13: Reader[T13], evT14: Reader[T14], evT15: Reader[T15]): ResultSet => Seq[R] = buildSequenceMapper(Mapper(constructor))
  def apply[T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, R](constructor: (T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16) => R)(implicit evT1: Reader[T1], evT2: Reader[T2], evT3: Reader[T3], evT4: Reader[T4], evT5: Reader[T5], evT6: Reader[T6], evT7: Reader[T7], evT8: Reader[T8], evT9: Reader[T9], evT10: Reader[T10], evT11: Reader[T11], evT12: Reader[T12], evT13: Reader[T13], evT14: Reader[T14], evT15: Reader[T15], evT16: Reader[T16]): ResultSet => Seq[R] = buildSequenceMapper(Mapper(constructor))
  def apply[T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, R](constructor: (T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17) => R)(implicit evT1: Reader[T1], evT2: Reader[T2], evT3: Reader[T3], evT4: Reader[T4], evT5: Reader[T5], evT6: Reader[T6], evT7: Reader[T7], evT8: Reader[T8], evT9: Reader[T9], evT10: Reader[T10], evT11: Reader[T11], evT12: Reader[T12], evT13: Reader[T13], evT14: Reader[T14], evT15: Reader[T15], evT16: Reader[T16], evT17: Reader[T17]): ResultSet => Seq[R] = buildSequenceMapper(Mapper(constructor))
  def apply[T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, R](constructor: (T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18) => R)(implicit evT1: Reader[T1], evT2: Reader[T2], evT3: Reader[T3], evT4: Reader[T4], evT5: Reader[T5], evT6: Reader[T6], evT7: Reader[T7], evT8: Reader[T8], evT9: Reader[T9], evT10: Reader[T10], evT11: Reader[T11], evT12: Reader[T12], evT13: Reader[T13], evT14: Reader[T14], evT15: Reader[T15], evT16: Reader[T16], evT17: Reader[T17], evT18: Reader[T18]): ResultSet => Seq[R] = buildSequenceMapper(Mapper(constructor))
  def apply[T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, R](constructor: (T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19) => R)(implicit evT1: Reader[T1], evT2: Reader[T2], evT3: Reader[T3], evT4: Reader[T4], evT5: Reader[T5], evT6: Reader[T6], evT7: Reader[T7], evT8: Reader[T8], evT9: Reader[T9], evT10: Reader[T10], evT11: Reader[T11], evT12: Reader[T12], evT13: Reader[T13], evT14: Reader[T14], evT15: Reader[T15], evT16: Reader[T16], evT17: Reader[T17], evT18: Reader[T18], evT19: Reader[T19]): ResultSet => Seq[R] = buildSequenceMapper(Mapper(constructor))
  def apply[T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, R](constructor: (T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20) => R)(implicit evT1: Reader[T1], evT2: Reader[T2], evT3: Reader[T3], evT4: Reader[T4], evT5: Reader[T5], evT6: Reader[T6], evT7: Reader[T7], evT8: Reader[T8], evT9: Reader[T9], evT10: Reader[T10], evT11: Reader[T11], evT12: Reader[T12], evT13: Reader[T13], evT14: Reader[T14], evT15: Reader[T15], evT16: Reader[T16], evT17: Reader[T17], evT18: Reader[T18], evT19: Reader[T19], evT20: Reader[T20]): ResultSet => Seq[R] = buildSequenceMapper(Mapper(constructor))
  def apply[T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, R](constructor: (T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21) => R)(implicit evT1: Reader[T1], evT2: Reader[T2], evT3: Reader[T3], evT4: Reader[T4], evT5: Reader[T5], evT6: Reader[T6], evT7: Reader[T7], evT8: Reader[T8], evT9: Reader[T9], evT10: Reader[T10], evT11: Reader[T11], evT12: Reader[T12], evT13: Reader[T13], evT14: Reader[T14], evT15: Reader[T15], evT16: Reader[T16], evT17: Reader[T17], evT18: Reader[T18], evT19: Reader[T19], evT20: Reader[T20], evT21: Reader[T21]): ResultSet => Seq[R] = buildSequenceMapper(Mapper(constructor))
  def apply[T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, R](constructor: (T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22) => R)(implicit evT1: Reader[T1], evT2: Reader[T2], evT3: Reader[T3], evT4: Reader[T4], evT5: Reader[T5], evT6: Reader[T6], evT7: Reader[T7], evT8: Reader[T8], evT9: Reader[T9], evT10: Reader[T10], evT11: Reader[T11], evT12: Reader[T12], evT13: Reader[T13], evT14: Reader[T14], evT15: Reader[T15], evT16: Reader[T16], evT17: Reader[T17], evT18: Reader[T18], evT19: Reader[T19], evT20: Reader[T20], evT21: Reader[T21], evT22: Reader[T22]): ResultSet => Seq[R] = buildSequenceMapper(Mapper(constructor))

  def buildSequenceMapper[R](mapper:ResultSet => R): ResultSet => Seq[R] = {
    rs:ResultSet => {
      val result = scala.collection.mutable.ListBuffer.empty[R]
      while (rs.next()) {
        result.append(mapper(rs))
      }
      result
    }
  }

  object Mapper {
    def apply[T1, R](constructor: T1 => R)(implicit evT1: Reader[T1]): ResultSet => R = {rs: ResultSet => {constructor(evT1.fromResultSet(1, rs))}}
    def apply[T1, T2, R](constructor: (T1, T2) => R)(implicit evT1: Reader[T1], evT2: Reader[T2]): ResultSet => R = {rs: ResultSet => {constructor(evT1.fromResultSet(1, rs), evT2.fromResultSet(2, rs))}}
    def apply[T1, T2, T3, R](constructor: (T1, T2, T3) => R)(implicit evT1: Reader[T1], evT2: Reader[T2], evT3: Reader[T3]): ResultSet => R = {rs: ResultSet => {constructor(evT1.fromResultSet(1, rs), evT2.fromResultSet(2, rs), evT3.fromResultSet(3, rs))}}
    def apply[T1, T2, T3, T4, R](constructor: (T1, T2, T3, T4) => R)(implicit evT1: Reader[T1], evT2: Reader[T2], evT3: Reader[T3], evT4: Reader[T4]): ResultSet => R = {rs: ResultSet => {constructor(evT1.fromResultSet(1, rs), evT2.fromResultSet(2, rs), evT3.fromResultSet(3, rs), evT4.fromResultSet(4, rs))}}
    def apply[T1, T2, T3, T4, T5, R](constructor: (T1, T2, T3, T4, T5) => R)(implicit evT1: Reader[T1], evT2: Reader[T2], evT3: Reader[T3], evT4: Reader[T4], evT5: Reader[T5]): ResultSet => R = {rs: ResultSet => {constructor(evT1.fromResultSet(1, rs), evT2.fromResultSet(2, rs), evT3.fromResultSet(3, rs), evT4.fromResultSet(4, rs), evT5.fromResultSet(5, rs))}}
    def apply[T1, T2, T3, T4, T5, T6, R](constructor: (T1, T2, T3, T4, T5, T6) => R)(implicit evT1: Reader[T1], evT2: Reader[T2], evT3: Reader[T3], evT4: Reader[T4], evT5: Reader[T5], evT6: Reader[T6]): ResultSet => R = {rs: ResultSet => {constructor(evT1.fromResultSet(1, rs), evT2.fromResultSet(2, rs), evT3.fromResultSet(3, rs), evT4.fromResultSet(4, rs), evT5.fromResultSet(5, rs), evT6.fromResultSet(6, rs))}}
    def apply[T1, T2, T3, T4, T5, T6, T7, R](constructor: (T1, T2, T3, T4, T5, T6, T7) => R)(implicit evT1: Reader[T1], evT2: Reader[T2], evT3: Reader[T3], evT4: Reader[T4], evT5: Reader[T5], evT6: Reader[T6], evT7: Reader[T7]): ResultSet => R = {rs: ResultSet => {constructor(evT1.fromResultSet(1, rs), evT2.fromResultSet(2, rs), evT3.fromResultSet(3, rs), evT4.fromResultSet(4, rs), evT5.fromResultSet(5, rs), evT6.fromResultSet(6, rs), evT7.fromResultSet(7, rs))}}
    def apply[T1, T2, T3, T4, T5, T6, T7, T8, R](constructor: (T1, T2, T3, T4, T5, T6, T7, T8) => R)(implicit evT1: Reader[T1], evT2: Reader[T2], evT3: Reader[T3], evT4: Reader[T4], evT5: Reader[T5], evT6: Reader[T6], evT7: Reader[T7], evT8: Reader[T8]): ResultSet => R = {rs: ResultSet => {constructor(evT1.fromResultSet(1, rs), evT2.fromResultSet(2, rs), evT3.fromResultSet(3, rs), evT4.fromResultSet(4, rs), evT5.fromResultSet(5, rs), evT6.fromResultSet(6, rs), evT7.fromResultSet(7, rs), evT8.fromResultSet(8, rs))}}
    def apply[T1, T2, T3, T4, T5, T6, T7, T8, T9, R](constructor: (T1, T2, T3, T4, T5, T6, T7, T8, T9) => R)(implicit evT1: Reader[T1], evT2: Reader[T2], evT3: Reader[T3], evT4: Reader[T4], evT5: Reader[T5], evT6: Reader[T6], evT7: Reader[T7], evT8: Reader[T8], evT9: Reader[T9]): ResultSet => R = {rs: ResultSet => {constructor(evT1.fromResultSet(1, rs), evT2.fromResultSet(2, rs), evT3.fromResultSet(3, rs), evT4.fromResultSet(4, rs), evT5.fromResultSet(5, rs), evT6.fromResultSet(6, rs), evT7.fromResultSet(7, rs), evT8.fromResultSet(8, rs), evT9.fromResultSet(9, rs))}}
    def apply[T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, R](constructor: (T1, T2, T3, T4, T5, T6, T7, T8, T9, T10) => R)(implicit evT1: Reader[T1], evT2: Reader[T2], evT3: Reader[T3], evT4: Reader[T4], evT5: Reader[T5], evT6: Reader[T6], evT7: Reader[T7], evT8: Reader[T8], evT9: Reader[T9], evT10: Reader[T10]): ResultSet => R = {rs: ResultSet => {constructor(evT1.fromResultSet(1, rs), evT2.fromResultSet(2, rs), evT3.fromResultSet(3, rs), evT4.fromResultSet(4, rs), evT5.fromResultSet(5, rs), evT6.fromResultSet(6, rs), evT7.fromResultSet(7, rs), evT8.fromResultSet(8, rs), evT9.fromResultSet(9, rs), evT10.fromResultSet(10, rs))}}
    def apply[T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, R](constructor: (T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11) => R)(implicit evT1: Reader[T1], evT2: Reader[T2], evT3: Reader[T3], evT4: Reader[T4], evT5: Reader[T5], evT6: Reader[T6], evT7: Reader[T7], evT8: Reader[T8], evT9: Reader[T9], evT10: Reader[T10], evT11: Reader[T11]): ResultSet => R = {rs: ResultSet => {constructor(evT1.fromResultSet(1, rs), evT2.fromResultSet(2, rs), evT3.fromResultSet(3, rs), evT4.fromResultSet(4, rs), evT5.fromResultSet(5, rs), evT6.fromResultSet(6, rs), evT7.fromResultSet(7, rs), evT8.fromResultSet(8, rs), evT9.fromResultSet(9, rs), evT10.fromResultSet(10, rs), evT11.fromResultSet(11, rs))}}
    def apply[T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, R](constructor: (T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12) => R)(implicit evT1: Reader[T1], evT2: Reader[T2], evT3: Reader[T3], evT4: Reader[T4], evT5: Reader[T5], evT6: Reader[T6], evT7: Reader[T7], evT8: Reader[T8], evT9: Reader[T9], evT10: Reader[T10], evT11: Reader[T11], evT12: Reader[T12]): ResultSet => R = {rs: ResultSet => {constructor(evT1.fromResultSet(1, rs), evT2.fromResultSet(2, rs), evT3.fromResultSet(3, rs), evT4.fromResultSet(4, rs), evT5.fromResultSet(5, rs), evT6.fromResultSet(6, rs), evT7.fromResultSet(7, rs), evT8.fromResultSet(8, rs), evT9.fromResultSet(9, rs), evT10.fromResultSet(10, rs), evT11.fromResultSet(11, rs), evT12.fromResultSet(12, rs))}}
    def apply[T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, R](constructor: (T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13) => R)(implicit evT1: Reader[T1], evT2: Reader[T2], evT3: Reader[T3], evT4: Reader[T4], evT5: Reader[T5], evT6: Reader[T6], evT7: Reader[T7], evT8: Reader[T8], evT9: Reader[T9], evT10: Reader[T10], evT11: Reader[T11], evT12: Reader[T12], evT13: Reader[T13]): ResultSet => R = {rs: ResultSet => {constructor(evT1.fromResultSet(1, rs), evT2.fromResultSet(2, rs), evT3.fromResultSet(3, rs), evT4.fromResultSet(4, rs), evT5.fromResultSet(5, rs), evT6.fromResultSet(6, rs), evT7.fromResultSet(7, rs), evT8.fromResultSet(8, rs), evT9.fromResultSet(9, rs), evT10.fromResultSet(10, rs), evT11.fromResultSet(11, rs), evT12.fromResultSet(12, rs), evT13.fromResultSet(13, rs))}}
    def apply[T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, R](constructor: (T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14) => R)(implicit evT1: Reader[T1], evT2: Reader[T2], evT3: Reader[T3], evT4: Reader[T4], evT5: Reader[T5], evT6: Reader[T6], evT7: Reader[T7], evT8: Reader[T8], evT9: Reader[T9], evT10: Reader[T10], evT11: Reader[T11], evT12: Reader[T12], evT13: Reader[T13], evT14: Reader[T14]): ResultSet => R = {rs: ResultSet => {constructor(evT1.fromResultSet(1, rs), evT2.fromResultSet(2, rs), evT3.fromResultSet(3, rs), evT4.fromResultSet(4, rs), evT5.fromResultSet(5, rs), evT6.fromResultSet(6, rs), evT7.fromResultSet(7, rs), evT8.fromResultSet(8, rs), evT9.fromResultSet(9, rs), evT10.fromResultSet(10, rs), evT11.fromResultSet(11, rs), evT12.fromResultSet(12, rs), evT13.fromResultSet(13, rs), evT14.fromResultSet(14, rs))}}
    def apply[T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, R](constructor: (T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15) => R)(implicit evT1: Reader[T1], evT2: Reader[T2], evT3: Reader[T3], evT4: Reader[T4], evT5: Reader[T5], evT6: Reader[T6], evT7: Reader[T7], evT8: Reader[T8], evT9: Reader[T9], evT10: Reader[T10], evT11: Reader[T11], evT12: Reader[T12], evT13: Reader[T13], evT14: Reader[T14], evT15: Reader[T15]): ResultSet => R = {rs: ResultSet => {constructor(evT1.fromResultSet(1, rs), evT2.fromResultSet(2, rs), evT3.fromResultSet(3, rs), evT4.fromResultSet(4, rs), evT5.fromResultSet(5, rs), evT6.fromResultSet(6, rs), evT7.fromResultSet(7, rs), evT8.fromResultSet(8, rs), evT9.fromResultSet(9, rs), evT10.fromResultSet(10, rs), evT11.fromResultSet(11, rs), evT12.fromResultSet(12, rs), evT13.fromResultSet(13, rs), evT14.fromResultSet(14, rs), evT15.fromResultSet(15, rs))}}
    def apply[T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, R](constructor: (T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16) => R)(implicit evT1: Reader[T1], evT2: Reader[T2], evT3: Reader[T3], evT4: Reader[T4], evT5: Reader[T5], evT6: Reader[T6], evT7: Reader[T7], evT8: Reader[T8], evT9: Reader[T9], evT10: Reader[T10], evT11: Reader[T11], evT12: Reader[T12], evT13: Reader[T13], evT14: Reader[T14], evT15: Reader[T15], evT16: Reader[T16]): ResultSet => R = {rs: ResultSet => {constructor(evT1.fromResultSet(1, rs), evT2.fromResultSet(2, rs), evT3.fromResultSet(3, rs), evT4.fromResultSet(4, rs), evT5.fromResultSet(5, rs), evT6.fromResultSet(6, rs), evT7.fromResultSet(7, rs), evT8.fromResultSet(8, rs), evT9.fromResultSet(9, rs), evT10.fromResultSet(10, rs), evT11.fromResultSet(11, rs), evT12.fromResultSet(12, rs), evT13.fromResultSet(13, rs), evT14.fromResultSet(14, rs), evT15.fromResultSet(15, rs), evT16.fromResultSet(16, rs))}}
    def apply[T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, R](constructor: (T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17) => R)(implicit evT1: Reader[T1], evT2: Reader[T2], evT3: Reader[T3], evT4: Reader[T4], evT5: Reader[T5], evT6: Reader[T6], evT7: Reader[T7], evT8: Reader[T8], evT9: Reader[T9], evT10: Reader[T10], evT11: Reader[T11], evT12: Reader[T12], evT13: Reader[T13], evT14: Reader[T14], evT15: Reader[T15], evT16: Reader[T16], evT17: Reader[T17]): ResultSet => R = {rs: ResultSet => {constructor(evT1.fromResultSet(1, rs), evT2.fromResultSet(2, rs), evT3.fromResultSet(3, rs), evT4.fromResultSet(4, rs), evT5.fromResultSet(5, rs), evT6.fromResultSet(6, rs), evT7.fromResultSet(7, rs), evT8.fromResultSet(8, rs), evT9.fromResultSet(9, rs), evT10.fromResultSet(10, rs), evT11.fromResultSet(11, rs), evT12.fromResultSet(12, rs), evT13.fromResultSet(13, rs), evT14.fromResultSet(14, rs), evT15.fromResultSet(15, rs), evT16.fromResultSet(16, rs), evT17.fromResultSet(17, rs))}}
    def apply[T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, R](constructor: (T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18) => R)(implicit evT1: Reader[T1], evT2: Reader[T2], evT3: Reader[T3], evT4: Reader[T4], evT5: Reader[T5], evT6: Reader[T6], evT7: Reader[T7], evT8: Reader[T8], evT9: Reader[T9], evT10: Reader[T10], evT11: Reader[T11], evT12: Reader[T12], evT13: Reader[T13], evT14: Reader[T14], evT15: Reader[T15], evT16: Reader[T16], evT17: Reader[T17], evT18: Reader[T18]): ResultSet => R = {rs: ResultSet => {constructor(evT1.fromResultSet(1, rs), evT2.fromResultSet(2, rs), evT3.fromResultSet(3, rs), evT4.fromResultSet(4, rs), evT5.fromResultSet(5, rs), evT6.fromResultSet(6, rs), evT7.fromResultSet(7, rs), evT8.fromResultSet(8, rs), evT9.fromResultSet(9, rs), evT10.fromResultSet(10, rs), evT11.fromResultSet(11, rs), evT12.fromResultSet(12, rs), evT13.fromResultSet(13, rs), evT14.fromResultSet(14, rs), evT15.fromResultSet(15, rs), evT16.fromResultSet(16, rs), evT17.fromResultSet(17, rs), evT18.fromResultSet(18, rs))}}
    def apply[T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, R](constructor: (T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19) => R)(implicit evT1: Reader[T1], evT2: Reader[T2], evT3: Reader[T3], evT4: Reader[T4], evT5: Reader[T5], evT6: Reader[T6], evT7: Reader[T7], evT8: Reader[T8], evT9: Reader[T9], evT10: Reader[T10], evT11: Reader[T11], evT12: Reader[T12], evT13: Reader[T13], evT14: Reader[T14], evT15: Reader[T15], evT16: Reader[T16], evT17: Reader[T17], evT18: Reader[T18], evT19: Reader[T19]): ResultSet => R = {rs: ResultSet => {constructor(evT1.fromResultSet(1, rs), evT2.fromResultSet(2, rs), evT3.fromResultSet(3, rs), evT4.fromResultSet(4, rs), evT5.fromResultSet(5, rs), evT6.fromResultSet(6, rs), evT7.fromResultSet(7, rs), evT8.fromResultSet(8, rs), evT9.fromResultSet(9, rs), evT10.fromResultSet(10, rs), evT11.fromResultSet(11, rs), evT12.fromResultSet(12, rs), evT13.fromResultSet(13, rs), evT14.fromResultSet(14, rs), evT15.fromResultSet(15, rs), evT16.fromResultSet(16, rs), evT17.fromResultSet(17, rs), evT18.fromResultSet(18, rs), evT19.fromResultSet(19, rs))}}
    def apply[T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, R](constructor: (T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20) => R)(implicit evT1: Reader[T1], evT2: Reader[T2], evT3: Reader[T3], evT4: Reader[T4], evT5: Reader[T5], evT6: Reader[T6], evT7: Reader[T7], evT8: Reader[T8], evT9: Reader[T9], evT10: Reader[T10], evT11: Reader[T11], evT12: Reader[T12], evT13: Reader[T13], evT14: Reader[T14], evT15: Reader[T15], evT16: Reader[T16], evT17: Reader[T17], evT18: Reader[T18], evT19: Reader[T19], evT20: Reader[T20]): ResultSet => R = {rs: ResultSet => {constructor(evT1.fromResultSet(1, rs), evT2.fromResultSet(2, rs), evT3.fromResultSet(3, rs), evT4.fromResultSet(4, rs), evT5.fromResultSet(5, rs), evT6.fromResultSet(6, rs), evT7.fromResultSet(7, rs), evT8.fromResultSet(8, rs), evT9.fromResultSet(9, rs), evT10.fromResultSet(10, rs), evT11.fromResultSet(11, rs), evT12.fromResultSet(12, rs), evT13.fromResultSet(13, rs), evT14.fromResultSet(14, rs), evT15.fromResultSet(15, rs), evT16.fromResultSet(16, rs), evT17.fromResultSet(17, rs), evT18.fromResultSet(18, rs), evT19.fromResultSet(19, rs), evT20.fromResultSet(20, rs))}}
    def apply[T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, R](constructor: (T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21) => R)(implicit evT1: Reader[T1], evT2: Reader[T2], evT3: Reader[T3], evT4: Reader[T4], evT5: Reader[T5], evT6: Reader[T6], evT7: Reader[T7], evT8: Reader[T8], evT9: Reader[T9], evT10: Reader[T10], evT11: Reader[T11], evT12: Reader[T12], evT13: Reader[T13], evT14: Reader[T14], evT15: Reader[T15], evT16: Reader[T16], evT17: Reader[T17], evT18: Reader[T18], evT19: Reader[T19], evT20: Reader[T20], evT21: Reader[T21]): ResultSet => R = {rs: ResultSet => {constructor(evT1.fromResultSet(1, rs), evT2.fromResultSet(2, rs), evT3.fromResultSet(3, rs), evT4.fromResultSet(4, rs), evT5.fromResultSet(5, rs), evT6.fromResultSet(6, rs), evT7.fromResultSet(7, rs), evT8.fromResultSet(8, rs), evT9.fromResultSet(9, rs), evT10.fromResultSet(10, rs), evT11.fromResultSet(11, rs), evT12.fromResultSet(12, rs), evT13.fromResultSet(13, rs), evT14.fromResultSet(14, rs), evT15.fromResultSet(15, rs), evT16.fromResultSet(16, rs), evT17.fromResultSet(17, rs), evT18.fromResultSet(18, rs), evT19.fromResultSet(19, rs), evT20.fromResultSet(20, rs), evT21.fromResultSet(21, rs))}}
    def apply[T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, R](constructor: (T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22) => R)(implicit evT1: Reader[T1], evT2: Reader[T2], evT3: Reader[T3], evT4: Reader[T4], evT5: Reader[T5], evT6: Reader[T6], evT7: Reader[T7], evT8: Reader[T8], evT9: Reader[T9], evT10: Reader[T10], evT11: Reader[T11], evT12: Reader[T12], evT13: Reader[T13], evT14: Reader[T14], evT15: Reader[T15], evT16: Reader[T16], evT17: Reader[T17], evT18: Reader[T18], evT19: Reader[T19], evT20: Reader[T20], evT21: Reader[T21], evT22: Reader[T22]): ResultSet => R = {rs: ResultSet => {constructor(evT1.fromResultSet(1, rs), evT2.fromResultSet(2, rs), evT3.fromResultSet(3, rs), evT4.fromResultSet(4, rs), evT5.fromResultSet(5, rs), evT6.fromResultSet(6, rs), evT7.fromResultSet(7, rs), evT8.fromResultSet(8, rs), evT9.fromResultSet(9, rs), evT10.fromResultSet(10, rs), evT11.fromResultSet(11, rs), evT12.fromResultSet(12, rs), evT13.fromResultSet(13, rs), evT14.fromResultSet(14, rs), evT15.fromResultSet(15, rs), evT16.fromResultSet(16, rs), evT17.fromResultSet(17, rs), evT18.fromResultSet(18, rs), evT19.fromResultSet(19, rs), evT20.fromResultSet(20, rs), evT21.fromResultSet(21, rs), evT22.fromResultSet(22, rs))}}
  }
}
