package net.amsoft.zioutils.services.jdbc

import java.sql.{Connection, ResultSet, Statement}

import com.sun.tools.javac.code.TypeTag
import net.amsoft.zioutils.services.jdbc.unsafe.ResultSetMapper.{Mapper, buildSequenceMapper}
import net.amsoft.zioutils.services.jdbc.unsafe.ResultSetReader.Reader
import net.amsoft.zioutils.services.jdbc.unsafe.{ResultSetMapper, ResultSetReader}
import zio.blocking.{Blocking, blocking}
import zio.{Has, IO, Layer, ZIO, ZLayer}

object JdbcConnectorService {

  /**
   * Case class for holding any necessary fields to create a JDBC Connection.
   * @param url
   * @param username
   * @param password
   */
  case class ConnectionInfo(url: String, username: String = "", password: String = "", driverClassName: Option[String] = None)

  trait Service {
    def getConnection(connectionInfo: ConnectionInfo): ZIO[Blocking, Exception, Connection]
    def closeConnection(connection: Connection): ZIO[Blocking, Exception, Unit]
    def createStatement(connection: Connection): ZIO[Blocking, Exception, Statement]
    def executeQuery(statement: Statement, sqlQuery: String): ZIO[Blocking, Exception, ResultSet]
    def execute(statement: Statement, sqlQuery: String): ZIO[Blocking, Exception, Boolean]
    def executeUpdate(statement: Statement, sqlQuery: String): ZIO[Blocking, Exception, Int]

    def executeQuery(connection: Connection, sqlQuery: String): ZIO[Blocking, Exception, ResultSet] = {
      for {
        statement <- createStatement(connection)
        result    <- executeQuery(statement, sqlQuery)
      } yield result
    }
    def execute(connection: Connection, sqlQuery: String): ZIO[Blocking, Exception, Boolean] = {
      for {
        statement <- createStatement(connection)
        result    <- execute(statement, sqlQuery)
      } yield result
    }
    def executeUpdate(connection: Connection, sqlQuery: String): ZIO[Blocking, Exception, Int] = {
      for {
        statement <- createStatement(connection)
        result    <- executeUpdate(statement, sqlQuery)
      } yield result
    }
  }

  val live: Layer[Exception, Has[Service]] = ZLayer.succeed(
    new Service {
      override def getConnection(connectionInfo: ConnectionInfo): ZIO[Blocking, Exception, Connection] =
        blocking(ZIO.fromEither(side_effects.getConnection(connectionInfo)))
      override def closeConnection(connection: Connection): ZIO[Blocking, Exception, Unit] =
        blocking(ZIO.fromEither(side_effects.closeConnection(connection)))
      override def executeQuery(statement: Statement, sqlQuery: String): ZIO[Blocking, Exception, ResultSet] =
        blocking(ZIO.fromEither(side_effects.executeQuery(statement, sqlQuery)))
      override def execute(statement: Statement, sqlQuery: String): ZIO[Blocking, Exception, Boolean] =
        blocking(ZIO.fromEither(side_effects.execute(statement, sqlQuery)))
      override def executeUpdate(statement: Statement, sqlQuery: String): ZIO[Blocking, Exception, Int] =
        blocking(ZIO.fromEither(side_effects.executeUpdate(statement: Statement, sqlQuery)))
      override def createStatement(connection: Connection): ZIO[Blocking, Exception, Statement] =
        blocking(ZIO.fromEither(side_effects.createStatement(connection)))
    }
  )

  def getConnection(connectionInfo: ConnectionInfo): ZIO[JdbcConnector, Exception, Connection] = ZIO.accessM(_.get.getConnection(connectionInfo))
  def createStatement(connection: Connection): ZIO[JdbcConnector, Exception, Statement] = ZIO.accessM(_.get.createStatement(connection))
  def closeConnection(connection: Connection): ZIO[JdbcConnector, Exception, Unit] = ZIO.accessM(_.get.closeConnection(connection))
  def executeQuery(statement: Statement, sqlQuery: String): ZIO[JdbcConnector, Exception, ResultSet] = ZIO.accessM(_.get.executeQuery(statement, sqlQuery))
  def executeQuery(connection: Connection, sqlQuery: String): ZIO[JdbcConnector, Exception, ResultSet] = ZIO.accessM(_.get.executeQuery(connection, sqlQuery))
  def execute(statement: Statement, sqlQuery: String): ZIO[JdbcConnector, Exception, Boolean] = ZIO.accessM(_.get.execute(statement, sqlQuery))
  def execute(connection: Connection, sqlQuery: String): ZIO[JdbcConnector, Exception, Boolean] = ZIO.accessM(_.get.execute(connection, sqlQuery))
  def executeUpdate(statement: Statement, sqlQuery: String): ZIO[JdbcConnector, Exception, Int] = ZIO.accessM(_.get.executeUpdate(statement, sqlQuery))
  def executeUpdate(connection: Connection, sqlQuery: String): ZIO[JdbcConnector, Exception, Int] = ZIO.accessM(_.get.executeUpdate(connection, sqlQuery))


  def executeQuery[T1,R](statement: Statement, sqlQuery: String, constructor: T1 => R)(implicit evT1: Reader[T1]): ZIO[JdbcConnector, Exception, Seq[R]] = executeQuery(statement, sqlQuery).flatMap(x => ResultSetMapper.zParse(ResultSetMapper.apply(constructor.apply _), x))
  def executeQuery[T1,R](connection: Connection, sqlQuery: String, constructor: T1 => R)(implicit evT1: Reader[T1]): ZIO[JdbcConnector, Exception, Seq[R]] = createStatement(connection).flatMap(statement => executeQuery(statement, sqlQuery, constructor.apply _))
  def executeQuery[T1,T2,R](statement: Statement, sqlQuery: String, constructor: (T1,T2) => R)(implicit evT1: Reader[T1],evT2: Reader[T2]): ZIO[JdbcConnector, Exception, Seq[R]] = executeQuery(statement, sqlQuery).flatMap(x => ResultSetMapper.zParse(ResultSetMapper.apply(constructor.apply _), x))
  def executeQuery[T1,T2,R](connection: Connection, sqlQuery: String, constructor: (T1,T2) => R)(implicit evT1: Reader[T1],evT2: Reader[T2]): ZIO[JdbcConnector, Exception, Seq[R]] = createStatement(connection).flatMap(statement => executeQuery(statement, sqlQuery, constructor.apply _))
  def executeQuery[T1,T2,T3,R](statement: Statement, sqlQuery: String, constructor: (T1,T2,T3) => R)(implicit evT1: Reader[T1],evT2: Reader[T2],evT3: Reader[T3]): ZIO[JdbcConnector, Exception, Seq[R]] = executeQuery(statement, sqlQuery).flatMap(x => ResultSetMapper.zParse(ResultSetMapper.apply(constructor.apply _), x))
  def executeQuery[T1,T2,T3,R](connection: Connection, sqlQuery: String, constructor: (T1,T2,T3) => R)(implicit evT1: Reader[T1],evT2: Reader[T2],evT3: Reader[T3]): ZIO[JdbcConnector, Exception, Seq[R]] = createStatement(connection).flatMap(statement => executeQuery(statement, sqlQuery, constructor.apply _))
  def executeQuery[T1,T2,T3,T4,R](statement: Statement, sqlQuery: String, constructor: (T1,T2,T3,T4) => R)(implicit evT1: Reader[T1],evT2: Reader[T2],evT3: Reader[T3],evT4: Reader[T4]): ZIO[JdbcConnector, Exception, Seq[R]] = executeQuery(statement, sqlQuery).flatMap(x => ResultSetMapper.zParse(ResultSetMapper.apply(constructor.apply _), x))
  def executeQuery[T1,T2,T3,T4,R](connection: Connection, sqlQuery: String, constructor: (T1,T2,T3,T4) => R)(implicit evT1: Reader[T1],evT2: Reader[T2],evT3: Reader[T3],evT4: Reader[T4]): ZIO[JdbcConnector, Exception, Seq[R]] = createStatement(connection).flatMap(statement => executeQuery(statement, sqlQuery, constructor.apply _))
  def executeQuery[T1,T2,T3,T4,T5,R](statement: Statement, sqlQuery: String, constructor: (T1,T2,T3,T4,T5) => R)(implicit evT1: Reader[T1],evT2: Reader[T2],evT3: Reader[T3],evT4: Reader[T4],evT5: Reader[T5]): ZIO[JdbcConnector, Exception, Seq[R]] = executeQuery(statement, sqlQuery).flatMap(x => ResultSetMapper.zParse(ResultSetMapper.apply(constructor.apply _), x))
  def executeQuery[T1,T2,T3,T4,T5,R](connection: Connection, sqlQuery: String, constructor: (T1,T2,T3,T4,T5) => R)(implicit evT1: Reader[T1],evT2: Reader[T2],evT3: Reader[T3],evT4: Reader[T4],evT5: Reader[T5]): ZIO[JdbcConnector, Exception, Seq[R]] = createStatement(connection).flatMap(statement => executeQuery(statement, sqlQuery, constructor.apply _))
  def executeQuery[T1,T2,T3,T4,T5,T6,R](statement: Statement, sqlQuery: String, constructor: (T1,T2,T3,T4,T5,T6) => R)(implicit evT1: Reader[T1],evT2: Reader[T2],evT3: Reader[T3],evT4: Reader[T4],evT5: Reader[T5],evT6: Reader[T6]): ZIO[JdbcConnector, Exception, Seq[R]] = executeQuery(statement, sqlQuery).flatMap(x => ResultSetMapper.zParse(ResultSetMapper.apply(constructor.apply _), x))
  def executeQuery[T1,T2,T3,T4,T5,T6,R](connection: Connection, sqlQuery: String, constructor: (T1,T2,T3,T4,T5,T6) => R)(implicit evT1: Reader[T1],evT2: Reader[T2],evT3: Reader[T3],evT4: Reader[T4],evT5: Reader[T5],evT6: Reader[T6]): ZIO[JdbcConnector, Exception, Seq[R]] = createStatement(connection).flatMap(statement => executeQuery(statement, sqlQuery, constructor.apply _))
  def executeQuery[T1,T2,T3,T4,T5,T6,T7,R](statement: Statement, sqlQuery: String, constructor: (T1,T2,T3,T4,T5,T6,T7) => R)(implicit evT1: Reader[T1],evT2: Reader[T2],evT3: Reader[T3],evT4: Reader[T4],evT5: Reader[T5],evT6: Reader[T6],evT7: Reader[T7]): ZIO[JdbcConnector, Exception, Seq[R]] = executeQuery(statement, sqlQuery).flatMap(x => ResultSetMapper.zParse(ResultSetMapper.apply(constructor.apply _), x))
  def executeQuery[T1,T2,T3,T4,T5,T6,T7,R](connection: Connection, sqlQuery: String, constructor: (T1,T2,T3,T4,T5,T6,T7) => R)(implicit evT1: Reader[T1],evT2: Reader[T2],evT3: Reader[T3],evT4: Reader[T4],evT5: Reader[T5],evT6: Reader[T6],evT7: Reader[T7]): ZIO[JdbcConnector, Exception, Seq[R]] = createStatement(connection).flatMap(statement => executeQuery(statement, sqlQuery, constructor.apply _))
  def executeQuery[T1,T2,T3,T4,T5,T6,T7,T8,R](statement: Statement, sqlQuery: String, constructor: (T1,T2,T3,T4,T5,T6,T7,T8) => R)(implicit evT1: Reader[T1],evT2: Reader[T2],evT3: Reader[T3],evT4: Reader[T4],evT5: Reader[T5],evT6: Reader[T6],evT7: Reader[T7],evT8: Reader[T8]): ZIO[JdbcConnector, Exception, Seq[R]] = executeQuery(statement, sqlQuery).flatMap(x => ResultSetMapper.zParse(ResultSetMapper.apply(constructor.apply _), x))
  def executeQuery[T1,T2,T3,T4,T5,T6,T7,T8,R](connection: Connection, sqlQuery: String, constructor: (T1,T2,T3,T4,T5,T6,T7,T8) => R)(implicit evT1: Reader[T1],evT2: Reader[T2],evT3: Reader[T3],evT4: Reader[T4],evT5: Reader[T5],evT6: Reader[T6],evT7: Reader[T7],evT8: Reader[T8]): ZIO[JdbcConnector, Exception, Seq[R]] = createStatement(connection).flatMap(statement => executeQuery(statement, sqlQuery, constructor.apply _))
  def executeQuery[T1,T2,T3,T4,T5,T6,T7,T8,T9,R](statement: Statement, sqlQuery: String, constructor: (T1,T2,T3,T4,T5,T6,T7,T8,T9) => R)(implicit evT1: Reader[T1],evT2: Reader[T2],evT3: Reader[T3],evT4: Reader[T4],evT5: Reader[T5],evT6: Reader[T6],evT7: Reader[T7],evT8: Reader[T8],evT9: Reader[T9]): ZIO[JdbcConnector, Exception, Seq[R]] = executeQuery(statement, sqlQuery).flatMap(x => ResultSetMapper.zParse(ResultSetMapper.apply(constructor.apply _), x))
  def executeQuery[T1,T2,T3,T4,T5,T6,T7,T8,T9,R](connection: Connection, sqlQuery: String, constructor: (T1,T2,T3,T4,T5,T6,T7,T8,T9) => R)(implicit evT1: Reader[T1],evT2: Reader[T2],evT3: Reader[T3],evT4: Reader[T4],evT5: Reader[T5],evT6: Reader[T6],evT7: Reader[T7],evT8: Reader[T8],evT9: Reader[T9]): ZIO[JdbcConnector, Exception, Seq[R]] = createStatement(connection).flatMap(statement => executeQuery(statement, sqlQuery, constructor.apply _))
  def executeQuery[T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,R](statement: Statement, sqlQuery: String, constructor: (T1,T2,T3,T4,T5,T6,T7,T8,T9,T10) => R)(implicit evT1: Reader[T1],evT2: Reader[T2],evT3: Reader[T3],evT4: Reader[T4],evT5: Reader[T5],evT6: Reader[T6],evT7: Reader[T7],evT8: Reader[T8],evT9: Reader[T9],evT10: Reader[T10]): ZIO[JdbcConnector, Exception, Seq[R]] = executeQuery(statement, sqlQuery).flatMap(x => ResultSetMapper.zParse(ResultSetMapper.apply(constructor.apply _), x))
  def executeQuery[T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,R](connection: Connection, sqlQuery: String, constructor: (T1,T2,T3,T4,T5,T6,T7,T8,T9,T10) => R)(implicit evT1: Reader[T1],evT2: Reader[T2],evT3: Reader[T3],evT4: Reader[T4],evT5: Reader[T5],evT6: Reader[T6],evT7: Reader[T7],evT8: Reader[T8],evT9: Reader[T9],evT10: Reader[T10]): ZIO[JdbcConnector, Exception, Seq[R]] = createStatement(connection).flatMap(statement => executeQuery(statement, sqlQuery, constructor.apply _))
  def executeQuery[T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,R](statement: Statement, sqlQuery: String, constructor: (T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11) => R)(implicit evT1: Reader[T1],evT2: Reader[T2],evT3: Reader[T3],evT4: Reader[T4],evT5: Reader[T5],evT6: Reader[T6],evT7: Reader[T7],evT8: Reader[T8],evT9: Reader[T9],evT10: Reader[T10],evT11: Reader[T11]): ZIO[JdbcConnector, Exception, Seq[R]] = executeQuery(statement, sqlQuery).flatMap(x => ResultSetMapper.zParse(ResultSetMapper.apply(constructor.apply _), x))
  def executeQuery[T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,R](connection: Connection, sqlQuery: String, constructor: (T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11) => R)(implicit evT1: Reader[T1],evT2: Reader[T2],evT3: Reader[T3],evT4: Reader[T4],evT5: Reader[T5],evT6: Reader[T6],evT7: Reader[T7],evT8: Reader[T8],evT9: Reader[T9],evT10: Reader[T10],evT11: Reader[T11]): ZIO[JdbcConnector, Exception, Seq[R]] = createStatement(connection).flatMap(statement => executeQuery(statement, sqlQuery, constructor.apply _))
  def executeQuery[T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,R](statement: Statement, sqlQuery: String, constructor: (T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12) => R)(implicit evT1: Reader[T1],evT2: Reader[T2],evT3: Reader[T3],evT4: Reader[T4],evT5: Reader[T5],evT6: Reader[T6],evT7: Reader[T7],evT8: Reader[T8],evT9: Reader[T9],evT10: Reader[T10],evT11: Reader[T11],evT12: Reader[T12]): ZIO[JdbcConnector, Exception, Seq[R]] = executeQuery(statement, sqlQuery).flatMap(x => ResultSetMapper.zParse(ResultSetMapper.apply(constructor.apply _), x))
  def executeQuery[T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,R](connection: Connection, sqlQuery: String, constructor: (T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12) => R)(implicit evT1: Reader[T1],evT2: Reader[T2],evT3: Reader[T3],evT4: Reader[T4],evT5: Reader[T5],evT6: Reader[T6],evT7: Reader[T7],evT8: Reader[T8],evT9: Reader[T9],evT10: Reader[T10],evT11: Reader[T11],evT12: Reader[T12]): ZIO[JdbcConnector, Exception, Seq[R]] = createStatement(connection).flatMap(statement => executeQuery(statement, sqlQuery, constructor.apply _))
  def executeQuery[T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,R](statement: Statement, sqlQuery: String, constructor: (T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13) => R)(implicit evT1: Reader[T1],evT2: Reader[T2],evT3: Reader[T3],evT4: Reader[T4],evT5: Reader[T5],evT6: Reader[T6],evT7: Reader[T7],evT8: Reader[T8],evT9: Reader[T9],evT10: Reader[T10],evT11: Reader[T11],evT12: Reader[T12],evT13: Reader[T13]): ZIO[JdbcConnector, Exception, Seq[R]] = executeQuery(statement, sqlQuery).flatMap(x => ResultSetMapper.zParse(ResultSetMapper.apply(constructor.apply _), x))
  def executeQuery[T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,R](connection: Connection, sqlQuery: String, constructor: (T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13) => R)(implicit evT1: Reader[T1],evT2: Reader[T2],evT3: Reader[T3],evT4: Reader[T4],evT5: Reader[T5],evT6: Reader[T6],evT7: Reader[T7],evT8: Reader[T8],evT9: Reader[T9],evT10: Reader[T10],evT11: Reader[T11],evT12: Reader[T12],evT13: Reader[T13]): ZIO[JdbcConnector, Exception, Seq[R]] = createStatement(connection).flatMap(statement => executeQuery(statement, sqlQuery, constructor.apply _))
  def executeQuery[T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,R](statement: Statement, sqlQuery: String, constructor: (T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14) => R)(implicit evT1: Reader[T1],evT2: Reader[T2],evT3: Reader[T3],evT4: Reader[T4],evT5: Reader[T5],evT6: Reader[T6],evT7: Reader[T7],evT8: Reader[T8],evT9: Reader[T9],evT10: Reader[T10],evT11: Reader[T11],evT12: Reader[T12],evT13: Reader[T13],evT14: Reader[T14]): ZIO[JdbcConnector, Exception, Seq[R]] = executeQuery(statement, sqlQuery).flatMap(x => ResultSetMapper.zParse(ResultSetMapper.apply(constructor.apply _), x))
  def executeQuery[T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,R](connection: Connection, sqlQuery: String, constructor: (T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14) => R)(implicit evT1: Reader[T1],evT2: Reader[T2],evT3: Reader[T3],evT4: Reader[T4],evT5: Reader[T5],evT6: Reader[T6],evT7: Reader[T7],evT8: Reader[T8],evT9: Reader[T9],evT10: Reader[T10],evT11: Reader[T11],evT12: Reader[T12],evT13: Reader[T13],evT14: Reader[T14]): ZIO[JdbcConnector, Exception, Seq[R]] = createStatement(connection).flatMap(statement => executeQuery(statement, sqlQuery, constructor.apply _))
  def executeQuery[T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,R](statement: Statement, sqlQuery: String, constructor: (T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15) => R)(implicit evT1: Reader[T1],evT2: Reader[T2],evT3: Reader[T3],evT4: Reader[T4],evT5: Reader[T5],evT6: Reader[T6],evT7: Reader[T7],evT8: Reader[T8],evT9: Reader[T9],evT10: Reader[T10],evT11: Reader[T11],evT12: Reader[T12],evT13: Reader[T13],evT14: Reader[T14],evT15: Reader[T15]): ZIO[JdbcConnector, Exception, Seq[R]] = executeQuery(statement, sqlQuery).flatMap(x => ResultSetMapper.zParse(ResultSetMapper.apply(constructor.apply _), x))
  def executeQuery[T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,R](connection: Connection, sqlQuery: String, constructor: (T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15) => R)(implicit evT1: Reader[T1],evT2: Reader[T2],evT3: Reader[T3],evT4: Reader[T4],evT5: Reader[T5],evT6: Reader[T6],evT7: Reader[T7],evT8: Reader[T8],evT9: Reader[T9],evT10: Reader[T10],evT11: Reader[T11],evT12: Reader[T12],evT13: Reader[T13],evT14: Reader[T14],evT15: Reader[T15]): ZIO[JdbcConnector, Exception, Seq[R]] = createStatement(connection).flatMap(statement => executeQuery(statement, sqlQuery, constructor.apply _))
  def executeQuery[T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,R](statement: Statement, sqlQuery: String, constructor: (T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16) => R)(implicit evT1: Reader[T1],evT2: Reader[T2],evT3: Reader[T3],evT4: Reader[T4],evT5: Reader[T5],evT6: Reader[T6],evT7: Reader[T7],evT8: Reader[T8],evT9: Reader[T9],evT10: Reader[T10],evT11: Reader[T11],evT12: Reader[T12],evT13: Reader[T13],evT14: Reader[T14],evT15: Reader[T15],evT16: Reader[T16]): ZIO[JdbcConnector, Exception, Seq[R]] = executeQuery(statement, sqlQuery).flatMap(x => ResultSetMapper.zParse(ResultSetMapper.apply(constructor.apply _), x))
  def executeQuery[T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,R](connection: Connection, sqlQuery: String, constructor: (T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16) => R)(implicit evT1: Reader[T1],evT2: Reader[T2],evT3: Reader[T3],evT4: Reader[T4],evT5: Reader[T5],evT6: Reader[T6],evT7: Reader[T7],evT8: Reader[T8],evT9: Reader[T9],evT10: Reader[T10],evT11: Reader[T11],evT12: Reader[T12],evT13: Reader[T13],evT14: Reader[T14],evT15: Reader[T15],evT16: Reader[T16]): ZIO[JdbcConnector, Exception, Seq[R]] = createStatement(connection).flatMap(statement => executeQuery(statement, sqlQuery, constructor.apply _))
  def executeQuery[T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,R](statement: Statement, sqlQuery: String, constructor: (T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17) => R)(implicit evT1: Reader[T1],evT2: Reader[T2],evT3: Reader[T3],evT4: Reader[T4],evT5: Reader[T5],evT6: Reader[T6],evT7: Reader[T7],evT8: Reader[T8],evT9: Reader[T9],evT10: Reader[T10],evT11: Reader[T11],evT12: Reader[T12],evT13: Reader[T13],evT14: Reader[T14],evT15: Reader[T15],evT16: Reader[T16],evT17: Reader[T17]): ZIO[JdbcConnector, Exception, Seq[R]] = executeQuery(statement, sqlQuery).flatMap(x => ResultSetMapper.zParse(ResultSetMapper.apply(constructor.apply _), x))
  def executeQuery[T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,R](connection: Connection, sqlQuery: String, constructor: (T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17) => R)(implicit evT1: Reader[T1],evT2: Reader[T2],evT3: Reader[T3],evT4: Reader[T4],evT5: Reader[T5],evT6: Reader[T6],evT7: Reader[T7],evT8: Reader[T8],evT9: Reader[T9],evT10: Reader[T10],evT11: Reader[T11],evT12: Reader[T12],evT13: Reader[T13],evT14: Reader[T14],evT15: Reader[T15],evT16: Reader[T16],evT17: Reader[T17]): ZIO[JdbcConnector, Exception, Seq[R]] = createStatement(connection).flatMap(statement => executeQuery(statement, sqlQuery, constructor.apply _))
  def executeQuery[T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18,R](statement: Statement, sqlQuery: String, constructor: (T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18) => R)(implicit evT1: Reader[T1],evT2: Reader[T2],evT3: Reader[T3],evT4: Reader[T4],evT5: Reader[T5],evT6: Reader[T6],evT7: Reader[T7],evT8: Reader[T8],evT9: Reader[T9],evT10: Reader[T10],evT11: Reader[T11],evT12: Reader[T12],evT13: Reader[T13],evT14: Reader[T14],evT15: Reader[T15],evT16: Reader[T16],evT17: Reader[T17],evT18: Reader[T18]): ZIO[JdbcConnector, Exception, Seq[R]] = executeQuery(statement, sqlQuery).flatMap(x => ResultSetMapper.zParse(ResultSetMapper.apply(constructor.apply _), x))
  def executeQuery[T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18,R](connection: Connection, sqlQuery: String, constructor: (T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18) => R)(implicit evT1: Reader[T1],evT2: Reader[T2],evT3: Reader[T3],evT4: Reader[T4],evT5: Reader[T5],evT6: Reader[T6],evT7: Reader[T7],evT8: Reader[T8],evT9: Reader[T9],evT10: Reader[T10],evT11: Reader[T11],evT12: Reader[T12],evT13: Reader[T13],evT14: Reader[T14],evT15: Reader[T15],evT16: Reader[T16],evT17: Reader[T17],evT18: Reader[T18]): ZIO[JdbcConnector, Exception, Seq[R]] = createStatement(connection).flatMap(statement => executeQuery(statement, sqlQuery, constructor.apply _))
  def executeQuery[T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18,T19,R](statement: Statement, sqlQuery: String, constructor: (T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18,T19) => R)(implicit evT1: Reader[T1],evT2: Reader[T2],evT3: Reader[T3],evT4: Reader[T4],evT5: Reader[T5],evT6: Reader[T6],evT7: Reader[T7],evT8: Reader[T8],evT9: Reader[T9],evT10: Reader[T10],evT11: Reader[T11],evT12: Reader[T12],evT13: Reader[T13],evT14: Reader[T14],evT15: Reader[T15],evT16: Reader[T16],evT17: Reader[T17],evT18: Reader[T18],evT19: Reader[T19]): ZIO[JdbcConnector, Exception, Seq[R]] = executeQuery(statement, sqlQuery).flatMap(x => ResultSetMapper.zParse(ResultSetMapper.apply(constructor.apply _), x))
  def executeQuery[T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18,T19,R](connection: Connection, sqlQuery: String, constructor: (T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18,T19) => R)(implicit evT1: Reader[T1],evT2: Reader[T2],evT3: Reader[T3],evT4: Reader[T4],evT5: Reader[T5],evT6: Reader[T6],evT7: Reader[T7],evT8: Reader[T8],evT9: Reader[T9],evT10: Reader[T10],evT11: Reader[T11],evT12: Reader[T12],evT13: Reader[T13],evT14: Reader[T14],evT15: Reader[T15],evT16: Reader[T16],evT17: Reader[T17],evT18: Reader[T18],evT19: Reader[T19]): ZIO[JdbcConnector, Exception, Seq[R]] = createStatement(connection).flatMap(statement => executeQuery(statement, sqlQuery, constructor.apply _))
  def executeQuery[T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18,T19,T20,R](statement: Statement, sqlQuery: String, constructor: (T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18,T19,T20) => R)(implicit evT1: Reader[T1],evT2: Reader[T2],evT3: Reader[T3],evT4: Reader[T4],evT5: Reader[T5],evT6: Reader[T6],evT7: Reader[T7],evT8: Reader[T8],evT9: Reader[T9],evT10: Reader[T10],evT11: Reader[T11],evT12: Reader[T12],evT13: Reader[T13],evT14: Reader[T14],evT15: Reader[T15],evT16: Reader[T16],evT17: Reader[T17],evT18: Reader[T18],evT19: Reader[T19],evT20: Reader[T20]): ZIO[JdbcConnector, Exception, Seq[R]] = executeQuery(statement, sqlQuery).flatMap(x => ResultSetMapper.zParse(ResultSetMapper.apply(constructor.apply _), x))
  def executeQuery[T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18,T19,T20,R](connection: Connection, sqlQuery: String, constructor: (T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18,T19,T20) => R)(implicit evT1: Reader[T1],evT2: Reader[T2],evT3: Reader[T3],evT4: Reader[T4],evT5: Reader[T5],evT6: Reader[T6],evT7: Reader[T7],evT8: Reader[T8],evT9: Reader[T9],evT10: Reader[T10],evT11: Reader[T11],evT12: Reader[T12],evT13: Reader[T13],evT14: Reader[T14],evT15: Reader[T15],evT16: Reader[T16],evT17: Reader[T17],evT18: Reader[T18],evT19: Reader[T19],evT20: Reader[T20]): ZIO[JdbcConnector, Exception, Seq[R]] = createStatement(connection).flatMap(statement => executeQuery(statement, sqlQuery, constructor.apply _))
  def executeQuery[T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18,T19,T20,T21,R](statement: Statement, sqlQuery: String, constructor: (T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18,T19,T20,T21) => R)(implicit evT1: Reader[T1],evT2: Reader[T2],evT3: Reader[T3],evT4: Reader[T4],evT5: Reader[T5],evT6: Reader[T6],evT7: Reader[T7],evT8: Reader[T8],evT9: Reader[T9],evT10: Reader[T10],evT11: Reader[T11],evT12: Reader[T12],evT13: Reader[T13],evT14: Reader[T14],evT15: Reader[T15],evT16: Reader[T16],evT17: Reader[T17],evT18: Reader[T18],evT19: Reader[T19],evT20: Reader[T20],evT21: Reader[T21]): ZIO[JdbcConnector, Exception, Seq[R]] = executeQuery(statement, sqlQuery).flatMap(x => ResultSetMapper.zParse(ResultSetMapper.apply(constructor.apply _), x))
  def executeQuery[T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18,T19,T20,T21,R](connection: Connection, sqlQuery: String, constructor: (T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18,T19,T20,T21) => R)(implicit evT1: Reader[T1],evT2: Reader[T2],evT3: Reader[T3],evT4: Reader[T4],evT5: Reader[T5],evT6: Reader[T6],evT7: Reader[T7],evT8: Reader[T8],evT9: Reader[T9],evT10: Reader[T10],evT11: Reader[T11],evT12: Reader[T12],evT13: Reader[T13],evT14: Reader[T14],evT15: Reader[T15],evT16: Reader[T16],evT17: Reader[T17],evT18: Reader[T18],evT19: Reader[T19],evT20: Reader[T20],evT21: Reader[T21]): ZIO[JdbcConnector, Exception, Seq[R]] = createStatement(connection).flatMap(statement => executeQuery(statement, sqlQuery, constructor.apply _))
  def executeQuery[T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18,T19,T20,T21,T22,R](statement: Statement, sqlQuery: String, constructor: (T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18,T19,T20,T21,T22) => R)(implicit evT1: Reader[T1],evT2: Reader[T2],evT3: Reader[T3],evT4: Reader[T4],evT5: Reader[T5],evT6: Reader[T6],evT7: Reader[T7],evT8: Reader[T8],evT9: Reader[T9],evT10: Reader[T10],evT11: Reader[T11],evT12: Reader[T12],evT13: Reader[T13],evT14: Reader[T14],evT15: Reader[T15],evT16: Reader[T16],evT17: Reader[T17],evT18: Reader[T18],evT19: Reader[T19],evT20: Reader[T20],evT21: Reader[T21],evT22: Reader[T22]): ZIO[JdbcConnector, Exception, Seq[R]] = executeQuery(statement, sqlQuery).flatMap(x => ResultSetMapper.zParse(ResultSetMapper.apply(constructor.apply _), x))
  def executeQuery[T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18,T19,T20,T21,T22,R](connection: Connection, sqlQuery: String, constructor: (T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18,T19,T20,T21,T22) => R)(implicit evT1: Reader[T1],evT2: Reader[T2],evT3: Reader[T3],evT4: Reader[T4],evT5: Reader[T5],evT6: Reader[T6],evT7: Reader[T7],evT8: Reader[T8],evT9: Reader[T9],evT10: Reader[T10],evT11: Reader[T11],evT12: Reader[T12],evT13: Reader[T13],evT14: Reader[T14],evT15: Reader[T15],evT16: Reader[T16],evT17: Reader[T17],evT18: Reader[T18],evT19: Reader[T19],evT20: Reader[T20],evT21: Reader[T21],evT22: Reader[T22]): ZIO[JdbcConnector, Exception, Seq[R]] = createStatement(connection).flatMap(statement => executeQuery(statement, sqlQuery, constructor.apply _))
}
